// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package reference

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ReferenceClient is the client API for Reference service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReferenceClient interface {
	// Send a notification about a change in the file system
	Notify(ctx context.Context, in *NotifyRequest, opts ...grpc.CallOption) (*NotifyResponse, error)
}

type referenceClient struct {
	cc grpc.ClientConnInterface
}

func NewReferenceClient(cc grpc.ClientConnInterface) ReferenceClient {
	return &referenceClient{cc}
}

func (c *referenceClient) Notify(ctx context.Context, in *NotifyRequest, opts ...grpc.CallOption) (*NotifyResponse, error) {
	out := new(NotifyResponse)
	err := c.cc.Invoke(ctx, "/reference.reference/Notify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReferenceServer is the server API for Reference service.
// All implementations must embed UnimplementedReferenceServer
// for forward compatibility
type ReferenceServer interface {
	// Send a notification about a change in the file system
	Notify(context.Context, *NotifyRequest) (*NotifyResponse, error)
	mustEmbedUnimplementedReferenceServer()
}

// UnimplementedReferenceServer must be embedded to have forward compatible implementations.
type UnimplementedReferenceServer struct {
}

func (UnimplementedReferenceServer) Notify(context.Context, *NotifyRequest) (*NotifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Notify not implemented")
}
func (UnimplementedReferenceServer) mustEmbedUnimplementedReferenceServer() {}

// UnsafeReferenceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReferenceServer will
// result in compilation errors.
type UnsafeReferenceServer interface {
	mustEmbedUnimplementedReferenceServer()
}

func RegisterReferenceServer(s grpc.ServiceRegistrar, srv ReferenceServer) {
	s.RegisterService(&Reference_ServiceDesc, srv)
}

func _Reference_Notify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferenceServer).Notify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reference.reference/Notify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferenceServer).Notify(ctx, req.(*NotifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Reference_ServiceDesc is the grpc.ServiceDesc for Reference service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Reference_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "reference.reference",
	HandlerType: (*ReferenceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Notify",
			Handler:    _Reference_Notify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "reference/reference.proto",
}
